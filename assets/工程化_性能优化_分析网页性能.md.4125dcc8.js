import{_ as t,c as e,o as d,N as r}from"./chunks/framework.cd9250a1.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"工程化/性能优化/分析网页性能.md"}'),a={name:"工程化/性能优化/分析网页性能.md"},o=r("<p>分析工具：</p><p>lighthouse、performance dev tool、公司 apms 系统（加载性能指标）</p><p>公司 apms 系统的性能指标数据绘制</p><p>分析内容：</p><ol><li>首屏加载时间</li></ol><table><thead><tr><th>指标</th><th>耗时</th><th>备注</th></tr></thead><tbody><tr><td>Profiling Overhead</td><td>692.55 ms</td><td>Profiling Overhead 是在对程序进行性能分析时，由于性能分析工具本身的消耗而导致的程序运行速度变慢的现象。简单来说，就是在对程序进行性能分析时，分析工具会往程序中插入额外的代码或者耗费额外的计算资源，从而影响程序的真实执行时间和性能指标。这种情况下得到的分析结果可能会产生一些误导性的信息，因为它没有反映出程序在真实环境下的运行状况。因此，在进行性能分析时，需要考虑到 Profiling Overhead 的影响，并尽量减少它对程序执行的影响。</td></tr><tr><td>Compile code</td><td>34.91 ms</td><td>网页前端编译的耗时较 C++ 等编译过程相比明显较短，不过也存在一些需要优化的因素：<br>图片大小：大型图片会导致页面加载缓慢，应尽可能压缩图片并使用适当的格式。例如，少数情况下可以使用 WebP 格式，它通常比 JPEG 和 PNG 更小。 JavaScript 文件大小：JavaScript 文件可以通过压缩或混淆来减小文件大小，并使用 RequireJS 或者 webpack 等打包工具把多个文件合并在一起，以减少浏览器的请求次数。 CSS 文件大小：CSS 文件也可以通过压缩、删除注释和未使用样式等方式来减小文件大小。 缓存策略：启用浏览器的缓存功能可以显著提高页面加载速度，减少 HTTP 请求的次数。 服务器反应时间（TTFB）：服务器反应时间对于整个页面加载速度非常关键，需要优化后端代码，使用缓存技术等方式以保证较短的 TTFB 时间。<br>综上所述，对于网页前端编译的优化需要从多方面出发，如减小图片和文件大小、优化缓存策略、减少请求次数等。另外，需要注意的是，在优化前必须先量化测量，找出瓶颈和优化后的结果来判断哪些措施最为有效。</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>",6),_=[o];function p(s,i,c,n,l,h){return d(),e("div",null,_)}const T=t(a,[["render",p]]);export{S as __pageData,T as default};
