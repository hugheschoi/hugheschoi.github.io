import{_ as a,c as s,o as p,N as e}from"./chunks/framework.cd9250a1.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/文章/什么是递归，通过这篇文章，让你彻底搞懂递归.md"}'),n={name:"algorithm/文章/什么是递归，通过这篇文章，让你彻底搞懂递归.md"},c=e(`<p><a href="https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&amp;mid=2247487910&amp;idx=1&amp;sn=2670aec7139c6b98e83ff66114ac1cf7&amp;chksm=fb418286cc360b90741ed54fecd62fd45571b2caba3e41473a7ea0934f918d4b31537689c664&amp;token=910002910&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s?__biz=MzU0ODMyNDk0Mw==&amp;mid=2247487910&amp;idx=1&amp;sn=2670aec7139c6b98e83ff66114ac1cf7&amp;chksm=fb418286cc360b90741ed54fecd62fd45571b2caba3e41473a7ea0934f918d4b31537689c664&amp;token=910002910&amp;lang=zh_CN#rd</a></p><p>递归，就是在运行的过程中调用自己。</p><p>构成递归需具备的条件：</p><ol><li>子问题须与原始问题为同样的事，且更为简单；</li><li>不能无限制地调用本身，须有个出口，化简为非递归状况处理。</li></ol><h3 id="模板" tabindex="-1">模板 <a class="header-anchor" href="#模板" aria-label="Permalink to &quot;模板&quot;">​</a></h3><p>我们知道递归必须具备两个条件，一个是调用自己，一个是有终止条件。这两个条件必须同时具备，且一个都不能少。并且终止条件必须是在递归最开始的地方，也就是下面这样</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public void recursion(参数0) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if (终止条件) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        return;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    recursion(参数1);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>但实际上递归可能调用自己不止一次</p><p>我对递归的理解是先往下一层层传递，当碰到终止条件的时候会反弹，最终会反弹到调用处</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/PGmTibd8KQBGcIr3bf70rZWWrgq6Vf937XHLEc3VPic85rXlUqtmibfVbN6Jpbjibsjic3iaLicC8PmB6gicpycbjkBqLw/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>我们只需要知道递归函数的功能即可，不要把递归一层一层的拆开来想,比如上面的题中要求f(5)，我们只需要计算f(4)即可，即f(5)=5*f(4)；至于f(4)是怎么计算的，我们就不要管了。</p>`,11),t=[c];function l(i,o,_,r,m,d){return p(),s("div",null,t)}const h=a(n,[["render",l]]);export{b as __pageData,h as default};
