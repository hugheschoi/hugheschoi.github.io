import{_ as e,c as r,o as a,N as t}from"./chunks/framework.cd9250a1.js";const f=JSON.parse('{"title":"Trie树","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/算法体系/6.1字典树.md"}'),i={name:"algorithm/算法体系/6.1字典树.md"},o=t('<h1 id="trie树" tabindex="-1">Trie树 <a class="header-anchor" href="#trie树" aria-label="Permalink to &quot;Trie树&quot;">​</a></h1><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noreferrer">二叉树的层次遍历</a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/solution/" target="_blank" rel="noreferrer">实现 Trie</a><a href="https://shimo.im/docs/DP53Y6rOwN8MTCQH" target="_blank" rel="noreferrer">Tire 树代码模板</a></p><h2 id="实现-trie-前缀树" tabindex="-1">实现 Trie (前缀树) <a class="header-anchor" href="#实现-trie-前缀树" aria-label="Permalink to &quot;实现 Trie (前缀树)&quot;">​</a></h2><p>（亚马逊、微软、谷歌在半年内面试中考过）</p><h2 id="单词搜索-ii" tabindex="-1">单词搜索 II <a class="header-anchor" href="#单词搜索-ii" aria-label="Permalink to &quot;单词搜索 II&quot;">​</a></h2><p>（亚马逊、微软、苹果在半年内面试中考过）</p><h2 id="分析单词搜索-2-用-tire-树方式实现的时间复杂度。" tabindex="-1">分析单词搜索 2 用 Tire 树方式实现的时间复杂度。 <a class="header-anchor" href="#分析单词搜索-2-用-tire-树方式实现的时间复杂度。" aria-label="Permalink to &quot;分析单词搜索 2 用 Tire 树方式实现的时间复杂度。&quot;">​</a></h2>',7),l=[o];function n(s,_,c,h,d,p){return a(),r("div",null,l)}const T=e(i,[["render",n]]);export{f as __pageData,T as default};
