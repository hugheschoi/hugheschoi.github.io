import{_ as s,c as a,o as n,N as p}from"./chunks/framework.cd9250a1.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"chatgpt/git.md"}'),l={name:"chatgpt/git.md"},e=p(`<h4 id="git-查看新分支是从哪拉出来的" tabindex="-1">git 查看新分支是从哪拉出来的 <a class="header-anchor" href="#git-查看新分支是从哪拉出来的" aria-label="Permalink to &quot;git 查看新分支是从哪拉出来的&quot;">​</a></h4><p>要查看 Git 中新分支是从哪里拉出来的，可以使用以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge-base</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">branch-nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"></span></code></pre></div><p>将 <code>&lt;branch-name&gt;</code> 替换为您想要查找其来源的分支的名称。此命令将返回指定分支和 <code>master</code> 分支的最近共同祖先的 SHA-1 校验和。如果该值与当前分支的 SHA-1 校验和相同，则该分支是通过 <code>master</code> 分支合并而来。</p><p>这个命令会返回一个 SHA-1 值。如果有输出，它将是两个分支共同的祖先的SHA-1哈希。如果没有输出，这意味着它们根本没有公共的祖先，因此可以认为此分支是在空仓库中创建的。</p><p>例如，如果我们想知道名为 <code>feature-branch</code> 的分支是如何从 <code>master</code> 分支拉出的，我们可以运行以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge-base</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature-branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"></span></code></pre></div><p>如果该命令返回一个 SHA-1 校验和，则说明该分支是通过将 <code>master</code> 分支合并到 <code>feature-branch</code> 分支所创建的。如果该命令未返回任何结果，则该分支可能是在空仓库中创建的或者是由另一分支合并而来。</p><h4 id="查看git-commit记录" tabindex="-1">查看git commit记录 <a class="header-anchor" href="#查看git-commit记录" aria-label="Permalink to &quot;查看git commit记录&quot;">​</a></h4><p>要查看 Git 仓库中的提交历史记录，您可以使用以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span></span>
<span class="line"></span></code></pre></div><p>这将显示最近的提交记录列表。默认情况下，它会按时间顺序显示提交，并显示每个提交的作者、日期和消息。</p><p>如果您想要查看更详细的信息，可以使用 <code>--stat</code> 选项来显示有关每个提交所做更改的概述：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--stat</span></span>
<span class="line"></span></code></pre></div><p>还可以使用 <code>-p</code> 选项来显示与每个提交相关联的差异：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span></span>
<span class="line"></span></code></pre></div><p>如果您只想查看特定分支或标签的提交历史记录，则可以在命令中指定分支或标签的名称：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">branch-nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>还可以使用一些其他选项来过滤提交历史记录。例如，您可以在特定日期之后或之前查找提交：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--after=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-01-01</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--before=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2021-12-31</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>上面的命令将显示 2020 年 1 月 1 日以后或 2021 年 12 月 31 日之前的所有提交。</p><p>还有许多其他选项可用于自定义 Git 日志输出。您可以查看 Git 的文档以获取更多信息。</p><h4 id="git-查看分支的上游" tabindex="-1">git 查看分支的上游 <a class="header-anchor" href="#git-查看分支的上游" aria-label="Permalink to &quot;git 查看分支的上游&quot;">​</a></h4><p>要查看 Git 分支的上游，可以使用以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rev-parse</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--abbrev-ref</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">branch-nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">@{upstream}</span></span>
<span class="line"></span></code></pre></div><p>这会显示给定分支的上游分支名称。上游分支是该分支最后一次拉取更改的来源，也就是它所跟踪的远程分支。</p><p>如果您想查看分支跟踪的远程存储库的详细信息，可以使用以下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">show</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">remote-nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>这将显示有关远程存储库的信息，包括跟踪哪些分支以及它们的上游分支。</p>`,29),o=[e];function t(c,r,i,C,y,d){return n(),a("div",null,o)}const h=s(l,[["render",t]]);export{g as __pageData,h as default};
