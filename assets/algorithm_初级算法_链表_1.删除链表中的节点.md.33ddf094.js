import{_ as s,c as a,o as n,N as p}from"./chunks/framework.cd9250a1.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/初级算法/链表/1.删除链表中的节点.md"}'),l={name:"algorithm/初级算法/链表/1.删除链表中的节点.md"},o=p(`<p>有一个单链表的 head，我们想删除它其中的一个节点 node。</p><p>给你一个需要删除的节点 node 。你将 无法访问 第一个节点 head。</p><p>链表的所有值都是 唯一的，并且保证给定的节点 node 不是链表中的最后一个节点。</p><p>删除给定的节点。注意，删除节点并不是指从内存中删除它。这里的意思是：</p><ul><li><p>给定节点的值不应该存在于链表中。</p></li><li><p>链表中的节点数应该减少 1。</p></li><li><p>node 前面的所有值顺序相同。</p></li><li><p>node 后面的所有值顺序相同。</p></li></ul><p>自定义测试：</p><ul><li><p>对于输入，你应该提供整个链表 head 和要给出的节点 node。node 不应该是链表的最后一个节点，而应该是链表中的一个实际节点。</p></li><li><p>我们将构建链表，并将节点传递给你的函数。</p></li><li><p>输出将是调用你函数后的整个链表。</p></li></ul><p><img src="https://assets.leetcode.com/uploads/2020/09/01/node1.jpg" alt="img"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">输入：head = [4,5,1,9], node = 5</span></span>
<span class="line"><span style="color:#A6ACCD;">输出：[4,1,9]</span></span>
<span class="line"><span style="color:#A6ACCD;">解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://assets.leetcode.com/uploads/2020/09/01/node2.jpg" alt="img"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">输入：head = [4,5,1,9], node = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">输出：[4,5,9]</span></span>
<span class="line"><span style="color:#A6ACCD;">解释：指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> deleteNode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>删除某个节点，可以先找到目标节点，然后呢，把这个节点变成下一个节点（值和指针），对，没错，你把下一个节点的从链表删除了，把自己伪装了他，太狠了😂</p>`,13),e=[o];function t(c,r,i,C,D,d){return n(),a("div",null,e)}const _=s(l,[["render",t]]);export{A as __pageData,_ as default};
