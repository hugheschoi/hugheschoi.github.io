import{_ as s,c as n,o as a,N as p}from"./chunks/framework.cd9250a1.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rules/husky.md"}'),l={name:"rules/husky.md"},o=p(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本文主要探索 git commit 时代码提交校验的实现，日常开发我们使用 git 来管理代码，而 git commit 校验的实现依赖于第三方插件 husky，commitlint，lint-staged等，他们各自都有特殊的功能，共同作用实现 git commit 提交校验。</p><p>注：要实现 git commit 校验应确保你已经安装并配置好了相关的代码格式校验工具，比如eslint，prettier等。如果你还不知道如何安装 eslint，推荐阅读我的另一篇文章：</p><h2 id="husky是什么" tabindex="-1">husky是什么 <a class="header-anchor" href="#husky是什么" aria-label="Permalink to &quot;husky是什么&quot;">​</a></h2><p>husky 是一个 Git Hook 工具。其实就是一个为 git 客户端增加 hook 的工具。将其安装到所在仓库（husky install）的过程中它会自动在 .git 目录下增加相应的钩子实现在 pre-commit 阶段就执行一系列流程保证每一个 commit 的正确性。可以理解为 husky 是 git 版本管理工具为开发者开放的一个开口，让我们可以在代码提交的前后阶段做自己的事情。</p><p>实现 git commit 提交校验其实是依赖于 githooks，即git 使用的挂钩（githooks ）。</p><p>Git Hooks 就是那些在 Git 执行特定事件（如commit、merge，push、receive等等）前后后触发运行的脚本，挂钩是可以放置在挂钩目录中的程序，可在git执行的某些点触发动作。如果你使用过 vue，那么可以将挂钩类比为 vue 的生命周期钩子函数。挂钩可以在 git 的不同阶段做不同的事情。</p><p>如果想了解 githooks 的相关内容，推荐你查看文章：</p><p>GitHook工具 - husky 介绍及使用，Husky 官方文档，Husky - GitHub</p><p>安装</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">husky</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span></span>
<span class="line"></span></code></pre></div><p>安装完成执行如下代码，初始化(生成) .husky 目录文件</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky install</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>.husky 文件用来存放需要被git 读取的钩子文件</p><p>commitlint是什么</p><p>commitlint 包含 @commitlint/cli 和 @commitlint/config-conventional 插件，</p><p>commitlint 用来校验 commit 提交内容的格式的正确性</p><p>安装</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install --save-dev @commitlint/cli @commitlint/config-conventional</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>安装完成添加 commit-msg 钩子，执行如下代码添加：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx husky add .husky/commit-msg</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>将新增的 commit-msg 文件中的 undefined 替换为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npx --no-install commitlint --edit &quot;$1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这个钩子的主要作用就是在执行 git commit 之前执行上面这条命令，判断 commit 提交信息格式的正确性，依赖于 commitlint.config.js 配置文件中配置的规则。</p><p>在项目根目录新建 commitlint.config.js 文件，内容如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 继承的规则</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">extends</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@commitlint/config-conventional</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 定义规则类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">body-leading-blank</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">footer-leading-blank</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">header-max-length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">108</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">subject-empty</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">never</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">type-empty</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">never</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#676E95;font-style:italic;">// type 类型定义，表示 git 提交的 type 必须在以下类型范围内</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">type-enum</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​      </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">always</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​      [</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">feat</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 新功能 feature</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fix</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 修复 bug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">docs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 文档注释</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 代码格式(不影响代码运行的变动)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">refactor</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 重构(既不增加新功能，也不是修复bug)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">perf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 性能优化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 增加测试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chore</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 构建过程或辅助工具的变动</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">revert</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 回退</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 打包</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​      ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#676E95;font-style:italic;">// subject 大小写不做校验</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">​    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">subject-case</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>现在你就可以按照配置的格式来提交你的代码了。</p><p>commit 时报错：</p><p>Please add rules to your commitlint.config.js - Getting started guide: <a href="https://commitlint" target="_blank" rel="noreferrer">https://commitlint</a>.</p><p>那么现在当你 git commit 时必须严格安装规定的格式来提交你的 commit，但是如果代码有错误依然可以提交成功。所以下面就针对 git commit 时代码格式进行校验</p><p>pre-commit 钩子</p><p>创建命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">npx husky add .husky/pre-commit</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>因为代码正确性校验是依赖于其他插件的，比如我自己项目使用 eslint，而eslint 的命令行执行方式就是在 package.json 文件 script 对象中定义的命令，将 pre-commit 文件中的 undefined 替换为触发命令行执行的命令，如：npm run serve，serve即是你在 script 对象中配置的命令，如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// package.json   script对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-cli-service serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-cli-service build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">lint:eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint --ext .js,.vue src --fix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>pre-commit 文件</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">\\#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">npm run lint:eslint</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>现在当你每次提交代码都会对代码的正确性进行校验</p><p>但是存在一个问题，就是每次修改一个文件就给所有文件执行一次 lint 检查，如果你觉得无所谓可以忽略下面的内容。</p><p>如果你不想每次都对所有文件执行检查，那么可以使用 lint-staged 来实现这个功能</p><p>安装 lint-staged</p><p>安装</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">npm install --save-dev lint-staged</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>添加配置文件，在 .husky 文件中新增 lintstagedrc.js 文件，内容如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">*.{js,jsx,ts,tsx}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">{!(package)**.json,**.code-snippets,.!(browserslist)*rc}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prettier --write--parser json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">package.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">*.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">*.{scss,less,styl,html}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint --fix</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">*.md</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>添加 lint-staged 的命令行执行方式，在package.json 文件 script 对象中添加：</p><p>&quot;lint:staged&quot;: &quot;lint-staged -c ./.husky/lintstagedrc.js --allow-empty&quot;</p><p>-c 表示配置文件的路径</p><p>--allow-empty 表示默认情况下，当 linter 任务撤消所有暂存更改时，lint-staged 将退出并出错并中止提交。使用此标志允许创建空的 git 提交。</p><p>命令行配置及lint-staged 的详细内容请看：</p><p>lint-staged 使用教程</p><p>lint-staged - npm</p><p>修改 pre-commit 钩子中的命令行，改为执行 lint-staged，如下：</p><p>npm run lint:staged</p><p>现在你可以正常提交代码了</p><p>存在问题</p><p>基于上述的提交方式可能会存在问题，具体问题及解决方案详见：</p><p>vue 项目集成 husky+commitlint+stylelint</p><p>完善后的 pre-commit 文件</p><p>#!/bin/sh</p><p>. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</p><p>. &quot;$(dirname &quot;$0&quot;)/common.sh&quot;</p><p>[ -n &quot;$CI&quot; ] &amp;&amp; exit 0</p><p><strong># Check the file name</strong></p><p><strong># ! ls-lint cannot be used normally in mac pro of M1 system.</strong></p><p><strong># npm run lint:ls-lint</strong></p><p><strong># Format and submit code according to lintstagedrc.js configuration</strong></p><p>yarn run lint:lint-staged</p><p><strong># npm run lint:prettier</strong></p><p>————————————————</p>`,70),e=[o];function t(c,r,D,y,i,F){return a(),n("div",null,e)}const m=s(l,[["render",t]]);export{A as __pageData,m as default};
