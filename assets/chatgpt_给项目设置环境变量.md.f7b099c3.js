import{_ as s,c as n,o as a,N as e}from"./chunks/framework.cd9250a1.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"chatgpt/给项目设置环境变量.md"}'),p={name:"chatgpt/给项目设置环境变量.md"},l=e(`<h3 id="如何为一个前端项目设置环境变量" tabindex="-1">如何为一个前端项目设置环境变量 <a class="header-anchor" href="#如何为一个前端项目设置环境变量" aria-label="Permalink to &quot;如何为一个前端项目设置环境变量&quot;">​</a></h3><p>为一个前端项目设置环境变量的具体方法取决于你使用的前端框架或工具。不过，下面是一些通用的步骤：</p><ol><li>创建一个名为 <code>.env</code> 的文件并将其放置在你的项目根目录下。</li><li>在 <code>.env</code> 文件中定义你需要的环境变量，例如：</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">makefileCopy code</span></span>
<span class="line"><span style="color:#A6ACCD;">REACT_APP_API_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">your_api_key</span></span>
<span class="line"></span></code></pre></div><p>请注意，在 React 中使用环境变量时，必须以 <code>REACT_APP_</code> 作为前缀，以便在开发过程中自动加载它们。</p><ol><li>在项目中使用环境变量，例如在 React 中，你可以通过使用 <code>p<wbr>rocess.env.REACT_APP_API_KEY</code> 来访问它。</li></ol><p>如果你使用的是特定的框架或工具，最好查看它们的文档，以了解有关如何设置环境变量的详细信息。</p><h3 id="env-test-和-env-live-文件是什么" tabindex="-1">env.test 和 .env.live 文件是什么 <a class="header-anchor" href="#env-test-和-env-live-文件是什么" aria-label="Permalink to &quot;env.test 和 .env.live 文件是什么&quot;">​</a></h3><p><code>.env.test</code> 和 <code>.env.live</code> 文件是针对测试环境和生产环境分别设置的环境变量文件。</p><p>通常，前端项目有多个环境，例如开发环境、测试环境和生产环境。每个环境可能需要不同的配置和凭据，例如 API 密钥、数据库凭据等等。为了避免在不同的环境中手动更改这些配置和凭据，我们可以使用环境变量来动态设置它们。</p><p>在项目中，我们可以创建不同的环境变量文件来适应不同的环境。例如，<code>.env.test</code> 文件包含测试环境的配置和凭据，而 <code>.env.live</code> 文件包含生产环境的配置和凭据。然后，在部署应用程序时，我们可以使用适当的环境变量文件来设置正确的配置和凭据。</p><p>注意，对于 React 项目，需要在环境变量名称前添加 <code>REACT_APP_</code> 前缀才能使用它们。例如，<code>REACT_APP_API_KEY</code> 可以在 React 应用程序中使用。</p><p>总之，<code>.env.test</code> 和 <code>.env.live</code> 文件是为了在不同的环境中动态设置应用程序的配置和凭据而创建的文件。</p><h3 id="如何通过参数传递环境变量" tabindex="-1">如何通过参数传递环境变量 <a class="header-anchor" href="#如何通过参数传递环境变量" aria-label="Permalink to &quot;如何通过参数传递环境变量&quot;">​</a></h3><p>可以通过参数传递环境变量来动态设置应用程序的配置和凭据。这对于需要动态配置的云应用程序和容器化应用程序非常有用。下面是一些常用的传递环境变量的方法：</p><ol><li><p>Node.js 应用程序：可以使用 <code>p<wbr>rocess.env</code> 对象在 Node.js 应用程序中访问环境变量。可以使用 <code>--env</code> 或 <code>-e</code> 标志将环境变量传递给 Node.js 应用程序。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ NODE_ENV=production node app.js</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>Docker 容器：可以使用 <code>--env</code> 或 <code>-e</code> 标志将环境变量传递给 Docker 容器。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ docker run --env API_KEY=your_api_key your_image</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>Kubernetes 部署：可以使用 Kubernetes 的 ConfigMap 和 Secret 对象来存储环境变量，并在部署时将其注入容器中。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apiVersion: v1</span></span>
<span class="line"><span style="color:#A6ACCD;">kind: ConfigMap</span></span>
<span class="line"><span style="color:#A6ACCD;">metadata:</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: my-config</span></span>
<span class="line"><span style="color:#A6ACCD;">data:</span></span>
<span class="line"><span style="color:#A6ACCD;">  API_KEY: your_api_key</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apiVersion: v1</span></span>
<span class="line"><span style="color:#A6ACCD;">kind: Secret</span></span>
<span class="line"><span style="color:#A6ACCD;">metadata:</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: my-secret</span></span>
<span class="line"><span style="color:#A6ACCD;">data:</span></span>
<span class="line"><span style="color:#A6ACCD;">  API_SECRET: base64_encoded_secret</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">apiVersion: apps/v1</span></span>
<span class="line"><span style="color:#A6ACCD;">kind: Deployment</span></span>
<span class="line"><span style="color:#A6ACCD;">metadata:</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: my-app</span></span>
<span class="line"><span style="color:#A6ACCD;">spec:</span></span>
<span class="line"><span style="color:#A6ACCD;">  template:</span></span>
<span class="line"><span style="color:#A6ACCD;">    spec:</span></span>
<span class="line"><span style="color:#A6ACCD;">      containers:</span></span>
<span class="line"><span style="color:#A6ACCD;">      - name: my-container</span></span>
<span class="line"><span style="color:#A6ACCD;">        image: my-image</span></span>
<span class="line"><span style="color:#A6ACCD;">        env:</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: API_KEY</span></span>
<span class="line"><span style="color:#A6ACCD;">          valueFrom:</span></span>
<span class="line"><span style="color:#A6ACCD;">            configMapKeyRef:</span></span>
<span class="line"><span style="color:#A6ACCD;">              name: my-config</span></span>
<span class="line"><span style="color:#A6ACCD;">              key: API_KEY</span></span>
<span class="line"><span style="color:#A6ACCD;">        - name: API_SECRET</span></span>
<span class="line"><span style="color:#A6ACCD;">          valueFrom:</span></span>
<span class="line"><span style="color:#A6ACCD;">            secretKeyRef:</span></span>
<span class="line"><span style="color:#A6ACCD;">              name: my-secret</span></span>
<span class="line"><span style="color:#A6ACCD;">              key: API_SECRET</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li></ol><p>这些是一些常用的通过参数传递环境变量的方法。根据你的应用程序类型和部署方式，你可以选择适合你的方法来传递环境变量。</p><h3 id="jenkins-部署呢" tabindex="-1">jenkins 部署呢 <a class="header-anchor" href="#jenkins-部署呢" aria-label="Permalink to &quot;jenkins 部署呢&quot;">​</a></h3><p>在 Jenkins 中，可以使用插件和构建参数来传递环境变量并部署应用程序。</p><p>下面是一个简单的步骤：</p><ol><li><p>安装 &quot;EnvInject Plugin&quot; 插件：在 Jenkins 管理界面中选择 &quot;插件管理&quot;，然后搜索 &quot;EnvInject Plugin&quot; 并安装。</p></li><li><p>在 Jenkins 中添加构建参数：在 Jenkins 任务的配置页面中，添加构建参数，并将需要传递的环境变量设置为键值对。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">API_KEY=your_api_key</span></span>
<span class="line"><span style="color:#A6ACCD;">API_SECRET=your_api_secret</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>在 Jenkinsfile 中使用环境变量：在 Jenkinsfile 中，可以通过 <code>\${env.&lt;variable_name&gt;}</code> 访问 Jenkins 中设置的构建参数环境变量。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">stages {</span></span>
<span class="line"><span style="color:#A6ACCD;">    stage(&#39;Deploy&#39;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        steps {</span></span>
<span class="line"><span style="color:#A6ACCD;">            sh &#39;deploy.sh \${env.API_KEY} \${env.API_SECRET}&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>编写部署脚本：在部署脚本中，可以使用传递的环境变量来设置应用程序的配置和凭据。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#!/bin/bash</span></span>
<span class="line"><span style="color:#A6ACCD;">API_KEY=$1</span></span>
<span class="line"><span style="color:#A6ACCD;">API_SECRET=$2</span></span>
<span class="line"><span style="color:#A6ACCD;"># deploy application using API_KEY and API_SECRET</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li></ol><p>这是一个简单的步骤，可以在 Jenkins 中传递环境变量并部署应用程序。具体的步骤可能会因为你的部署方式而有所不同。如果你需要更多的帮助，请参考 Jenkins 的文档或社区支持。</p><h3 id="本地执行-depoly-sh-怎么传递环境变量" tabindex="-1">本地执行 depoly.sh 怎么传递环境变量 <a class="header-anchor" href="#本地执行-depoly-sh-怎么传递环境变量" aria-label="Permalink to &quot;本地执行 depoly.sh 怎么传递环境变量&quot;">​</a></h3><p>在本地执行 deploy.sh 脚本时，可以通过 export 命令来设置环境变量，并将其传递给脚本。</p><p>例如，假设你需要设置 API_KEY 和 API_SECRET 两个环境变量，并将其传递给 deploy.sh 脚本，可以按照以下步骤操作：</p><ol><li><p>在终端中使用 export 命令设置环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ export API_KEY=your_api_key</span></span>
<span class="line"><span style="color:#A6ACCD;">$ export API_SECRET=your_api_secret</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>执行 deploy.sh 脚本并将环境变量传递给它：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ sh deploy.sh $API_KEY $API_SECRET</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li></ol><p>在脚本中，你可以通过 $1 和 $2 来访问传递的环境变量。</p><p>请注意，在使用 export 命令设置环境变量时，这些变量只对当前终端会话有效。如果你需要在多个终端会话中使用相同的环境变量，你需要在每个会话中都执行相同的 export 命令。如果你需要将环境变量设置为永久的系统变量，你需要将其添加到你的系统配置文件中，例如 .bashrc 或 .bash_profile（对于 Linux 和 macOS 系统）。</p><h3 id="vitepress-怎么判断当前环境和生产环境" tabindex="-1">vitepress 怎么判断当前环境和生产环境 <a class="header-anchor" href="#vitepress-怎么判断当前环境和生产环境" aria-label="Permalink to &quot;vitepress 怎么判断当前环境和生产环境&quot;">​</a></h3><p>VitePress 是一个基于 Vue.js 的静态站点生成器，它的运行时环境可以根据当前是否为生产环境来做一些不同的处理。在 VitePress 中，可以通过 p<wbr>rocess.env.NODE_ENV 环境变量来判断当前是否为生产环境。</p><p>如果 p<wbr>rocess.env.NODE_ENV 的值为 &quot;production&quot;，则说明当前为生产环境，可以在代码中做一些相应的优化和处理。例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">if (p<wbr>rocess.env.NODE_ENV === &#39;production&#39;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 生产环境</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&#39;This is production environment.&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 添加 Google Analytics 代码等</span></span>
<span class="line"><span style="color:#A6ACCD;">} else {</span></span>
<span class="line"><span style="color:#A6ACCD;">  // 开发环境</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&#39;This is development environment.&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在 VitePress 中，可以在 .env 文件中设置 NODE_ENV 环境变量的值，以便在构建或运行过程中使用正确的环境。例如，可以在 .env 文件中设置 NODE_ENV 为 &quot;production&quot;，以便在构建生产环境时使用：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NODE_ENV=production</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>需要注意的是，VitePress 默认情况下会将 NODE_ENV 设置为 &quot;development&quot;，如果要构建生产环境，需要显式地设置 NODE_ENV 为 &quot;production&quot;。</p><h3 id="如何显式地设置-node-env-为-production" tabindex="-1">如何显式地设置 NODE_ENV 为 &quot;production&quot; <a class="header-anchor" href="#如何显式地设置-node-env-为-production" aria-label="Permalink to &quot;如何显式地设置 NODE_ENV 为 &quot;production&quot;&quot;">​</a></h3><p>在 VitePress 中，可以通过以下方式来显式地设置 NODE_ENV 环境变量为 &quot;production&quot;：</p><ol><li><p>在 .env 文件中设置 NODE_ENV 环境变量的值为 &quot;production&quot;：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NODE_ENV=production</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>在命令行中使用环境变量来设置 NODE_ENV 的值，例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NODE_ENV=production yarn build</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>在 package.json 文件中的 scripts 中，使用 cross-env 工具来设置 NODE_ENV 的值，例如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">jsonCopy code</span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;build&quot;: &quot;cross-env NODE_ENV=production vitepress build&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li></ol><p>在上述例子中，使用了 cross-env 工具来确保在 Windows 和 Linux 等不同操作系统上都能正常设置环境变量。</p><p>无论使用哪种方式，将 NODE_ENV 环境变量设置为 &quot;production&quot; 都可以让 VitePress 在构建或运行时使用生产环境的设置和配置。</p><h3 id="介绍一下-cross-env-怎么使用-原理是什么" tabindex="-1">介绍一下 cross-env ，怎么使用，原理是什么 <a class="header-anchor" href="#介绍一下-cross-env-怎么使用-原理是什么" aria-label="Permalink to &quot;介绍一下 cross-env ，怎么使用，原理是什么&quot;">​</a></h3><p>cross-env 是一个跨平台的命令行工具，它能够在不同的操作系统上设置环境变量。在不同的操作系统上，设置环境变量的命令会有所不同，使用 cross-env 可以屏蔽不同操作系统的差异，让环境变量能够被正确地设置。</p><p>使用 cross-env 很简单，只需要在命令行中使用 cross-env 命令来设置环境变量，然后再执行相应的命令即可。例如，在 package.json 文件中使用 cross-env 来设置 NODE_ENV 环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.production.js&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上述例子中，使用 cross-env 命令来设置 NODE_ENV 环境变量的值，然后在执行 webpack-dev-server 和 webpack 命令时，就可以使用正确的环境变量了。</p><p>cross-env 的原理是利用 Node.js 的跨平台能力，它会将设置环境变量的命令转换为跨平台的方式，从而在不同的操作系统上都能够正确设置环境变量。例如，在 Linux 和 macOS 系统上，设置环境变量的命令为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">arduinoCopy code</span></span>
<span class="line"><span style="color:#A6ACCD;">export NODE_ENV=production</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>而在 Windows 系统上，则为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">arduinoCopy code</span></span>
<span class="line"><span style="color:#A6ACCD;">set NODE_ENV=production</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>cross-env 会将上述命令转换为跨平台的命令，从而在不同的操作系统上都能够正确设置环境变量。因此，使用 cross-env 可以让我们的项目能够更好地跨平台运行，避免因为操作系统的差异而导致的问题。</p><h3 id="下面是将-c-代码转换为-javascript-的示例" tabindex="-1">下面是将 C++ 代码转换为 JavaScript 的示例： <a class="header-anchor" href="#下面是将-c-代码转换为-javascript-的示例" aria-label="Permalink to &quot;下面是将 C++ 代码转换为 JavaScript 的示例：&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function removeDuplicates(nums) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let i = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">    for (let n of nums) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (i === 0 || n &gt; nums[i - 1]) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            nums[i++] = n;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    return i;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在 JavaScript 中，数组也可以使用 for...of 循环来遍历数组中的元素。另外，JavaScript 中的数组索引从 0 开始，因此在代码中 i 的初始值应该设置为 0。另外，JavaScript 中的逻辑运算符与 C++ 中略有不同，逻辑非运算符在 JavaScript 中使用 ! 符号表示。</p><h3 id="jenkins-和-docker-是怎么搭配使用的" tabindex="-1">Jenkins 和 docker 是怎么搭配使用的 <a class="header-anchor" href="#jenkins-和-docker-是怎么搭配使用的" aria-label="Permalink to &quot;Jenkins 和 docker 是怎么搭配使用的&quot;">​</a></h3><p>Jenkins 和 Docker 可以很好地搭配使用，可以实现自动化构建、测试和部署等功能。</p><p>下面是一些常见的 Jenkins 和 Docker 的搭配使用场景：</p><ol><li>使用 Jenkins 自动化构建 Docker 镜像：可以在 Jenkins 上配置 Docker 构建任务，使用 Dockerfile 定义镜像构建过程，然后使用 Jenkins 运行构建任务来生成 Docker 镜像。</li><li>使用 Jenkins 自动化测试 Docker 镜像：可以在 Jenkins 上配置 Docker 测试任务，使用 Docker Compose 或 Kubernetes 等工具搭建测试环境，然后使用 Jenkins 运行测试任务来测试 Docker 镜像。</li><li>使用 Jenkins 自动化部署 Docker 镜像：可以在 Jenkins 上配置 Docker 部署任务，使用 Docker Compose 或 Kubernetes 等工具搭建部署环境，然后使用 Jenkins 运行部署任务来部署 Docker 镜像。</li><li>使用 Jenkins 和 Docker 实现持续集成和持续部署：可以将 Jenkins 与 Docker Compose 或 Kubernetes 等工具结合使用，通过自动化构建、测试和部署来实现持续集成和持续部署，从而实现快速、高效地交付软件。</li></ol><p>需要注意的是，在使用 Jenkins 和 Docker 搭配使用时，需要配置正确的权限和安全策略，以确保系统的安全性和稳定性。同时，需要根据具体的业务需求和应用场景来选择合适的工具和技术。</p>`,58),o=[l];function c(t,i,r,C,d,A){return a(),n("div",null,o)}const D=s(p,[["render",c]]);export{u as __pageData,D as default};
