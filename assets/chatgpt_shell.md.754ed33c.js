import{_ as s,c as a,o as n,N as l}from"./chunks/framework.cd9250a1.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"chatgpt/shell.md"}'),o={name:"chatgpt/shell.md"},p=l(`<h4 id="判断变量是不是等于-error" tabindex="-1"><strong>判断变量是不是等于&quot;error&quot;?</strong> <a class="header-anchor" href="#判断变量是不是等于-error" aria-label="Permalink to &quot;**判断变量是不是等于&quot;error&quot;?**&quot;">​</a></h4><p>在 <code>sh</code> 中，可以使用双等号 <code>==</code> 来判断一个变量是否等于另一个字符串。因此，要检查一个变量是否等于 <code>&quot;error&quot;</code>，可以使用以下代码：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$YOUR_VARIABLE</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Do something if variable equals &quot;error&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span></code></pre></div><p>在上面的代码中，将您想要检查的变量名替换到 <code>$YOUR_VARIABLE</code> 的位置即可。如果变量确实等于 <code>&quot;error&quot;</code>，则条件成立，并且 <code>then</code> 后面的语句将被执行。如果不等于，则条件不成立，将跳过 <code>then</code> 后面的语句。</p><h4 id="sh-if-else-怎么写" tabindex="-1"><strong>sh if else 怎么写?</strong> <a class="header-anchor" href="#sh-if-else-怎么写" aria-label="Permalink to &quot;**sh if else 怎么写?**&quot;">​</a></h4><p>在 <code>sh</code> 中，可以使用 <code>if-else</code> 语句来根据条件执行不同的代码块。以下是 <code>if-else</code> 语句的基本结构：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">condition</span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Execute this code if condition is true</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Execute this code if condition is false</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span></code></pre></div><p>其中 <code>[condition]</code> 是一个表达式，如果它的值为真，则执行 <code>then</code> 后面的代码块，否则执行 <code>else</code> 后面的代码块。</p><p>下面是一个示例，演示了如何使用 <code>if-else</code> 语句在 <code>sh</code> 中判断一个数是否小于等于 10：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">number</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$number</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-le</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">];</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The number is less than or equal to 10</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The number is greater than 10</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span></code></pre></div><p>在上面的示例中，我们定义了一个变量 <code>number</code> 并将其设置为 5。然后，我们使用 <code>if-else</code> 语句测试该变量是否小于或等于 10，并在控制台输出相应的文本。</p><p>注意，<code>if-else</code> 语句中的条件需要用方括号括起来，并且关键字 <code>then</code> 和 <code>else</code> 后面都需要有空格。</p><h4 id="执行-node-如何传递参数和使用参数" tabindex="-1">执行 node 如何传递参数和使用参数 <a class="header-anchor" href="#执行-node-如何传递参数和使用参数" aria-label="Permalink to &quot;执行 node 如何传递参数和使用参数&quot;">​</a></h4><p>在执行 Node.js 脚本时，可以通过命令行传递参数并在脚本中使用这些参数。以下是如何在 Node.js 中传递和使用参数的方法：</p><p><strong>传递参数</strong></p><p>要传递参数，请在命令行上使用 <code>node</code> 命令，并在文件名后面添加要传递的参数。多个参数之间用空格分隔。例如：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg3</span></span>
<span class="line"></span></code></pre></div><p>在上面的例子中，我们向 <code>app.js</code> 脚本传递了三个参数：<code>arg1</code>、<code>arg2</code> 和 <code>arg3</code>。</p><p>你也可以将参数作为环境变量传递给 Node.js 脚本。例如：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">MY_ARG</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">hello</span><span style="color:#A6ACCD;"> node app.js</span></span>
<span class="line"></span></code></pre></div><p>在上面的例子中，我们将 <code>MY_ARG</code> 变量设置为 <code>hello</code> 并将其传递给 <code>app.js</code> 脚本中。</p><p><strong>使用参数</strong></p><p>在 Node.js 中，传递给脚本的参数可以通过 <code>process.argv</code> 数组来访问。该数组包含了以下元素：</p><ul><li><code>process.argv[0]</code>：Node.js 的可执行文件路径。</li><li><code>process.argv[1]</code>：当前执行的 JavaScript 文件路径。</li><li><code>process.argv[2]</code> 到 <code>process.argv[n]</code>：传递给脚本的参数。</li></ul><p>例如，如果我们将以下代码保存到 <code>app.js</code> 文件中：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>然后在命令行上执行以下命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg3</span></span>
<span class="line"></span></code></pre></div><p>我们将看到以下输出：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[ &#39;C:\\\\Program Files\\\\nodejs\\\\node.exe&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;D:\\\\path\\\\to\\\\app.js&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;arg1&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;arg2&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;arg3&#39; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>从上面的输出中，我们可以发现传递给脚本的参数是从 <code>process.argv[2]</code> 开始的。因此，我们可以根据需要访问这些参数并在脚本中使用它们。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">First argument:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Second argument:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Third argument:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>这将分别输出：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">First argument: arg1</span></span>
<span class="line"><span style="color:#A6ACCD;">Second argument: arg2</span></span>
<span class="line"><span style="color:#A6ACCD;">Third argument: arg3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>请注意，<code>process.argv</code> 数组的前两个元素是 Node.js 和 JavaScript 文件的路径，并不是传递给脚本的参数。</p><h4 id="想再-sh-脚本上执行-nodejs-脚本-node-js-脚本执行异步的请求-得到结果后-在sh脚本上获取这个异步获取的值-并设置成环境变量" tabindex="-1">想再 sh 脚本上执行 nodejs 脚本，node.js 脚本执行异步的请求，得到结果后，在sh脚本上获取这个异步获取的值，并设置成环境变量 <a class="header-anchor" href="#想再-sh-脚本上执行-nodejs-脚本-node-js-脚本执行异步的请求-得到结果后-在sh脚本上获取这个异步获取的值-并设置成环境变量" aria-label="Permalink to &quot;想再 sh 脚本上执行 nodejs 脚本，node.js 脚本执行异步的请求，得到结果后，在sh脚本上获取这个异步获取的值，并设置成环境变量&quot;">​</a></h4><p>当在 sh 脚本中执行 nodejs 脚本时，可以使用以下命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> script.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>这将执行 <code>script.js</code> 文件，并将脚本返回的数据存储在 <code>$result</code> 变量中。如果 <code>script.js</code> 包含异步请求，它可能不会立即返回结果。在这种情况下，您需要等待结果并将其设置为环境变量。以下是一个示例：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Execute script.js and store the result in a variable</span></span>
<span class="line"><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> script.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Wait until the result is available</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-z</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$result</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sleep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Set the result as an environment variable</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> MY_VAR</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">The value of MY_VAR is: </span><span style="color:#A6ACCD;">$MY_VAR</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>在上面的示例中，我们首先执行 <code>node script.js</code> 命令，并将其结果赋值给 <code>$result</code> 变量。接下来，我们等待 <code>$result</code> 变量的值不再为空。一旦结果可用，我们使用 <code>export</code> 命令将其设置为环境变量 <code>$MY_VAR</code>。最后，我们打印出变量的值以进行验证。</p><p>请注意，等待异步结果的方式可能有所不同，具体取决于您的代码实现方式。例如，您可以使用 <code>sleep</code> 来等待固定时间，或者使用类似 <code>jq</code> 的工具来解析 JSON 数据并提取特定字段。在任何情况下，只要您能够获取异步结果并将其设置为环境变量，就可以做到这一点。</p><p><strong>有详细的例子吗？</strong></p><p>当您在 shell 脚本中执行一个 Node.js 脚本，该脚本可能会执行异步请求。然后，您需要等待异步请求返回结果，并将其设置为环境变量。下面是一个例子：</p><p><strong>async.js</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Async result is ready</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdout</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>这个脚本只是执行 5 秒钟的 <code>setTimeout</code>，并在控制台上输出一条消息，然后返回一个 JSON 格式的数据。</p><p>正如我之前所解释的，使用 <code>$()</code> 运算符可以将 Node.js 脚本输出的值赋给 shell 变量。所以，我们可以使用以下的语句来执行 <code>async.js</code> 并将结果存储到 <code>$RESULT</code> 变量中：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">RESULT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> async.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>但是，由于 <code>setTimeout</code> 的存在，<code>RESULT</code> 变量将被设置为空字符串。实际上，5 秒的延迟意味着在执行上述语句时，Node.js 脚本并没有立即返回任何东西。</p><p>因此，我们需要等待 Node.js 脚本完成执行以获取完整的结果。在这种情况下，我们可以使用 <code>jq</code> 工具来解析 JSON 数据并提取我们需要的字段。如果尚未安装 <code>jq</code>，请参阅官方 <a href="https://stedolan.github.io/jq/download/" target="_blank" rel="noreferrer">安装说明</a>。</p><p>接下来，我们可以使用以下代码来等待异步请求返回结果：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">RESULT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> async.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-z</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$RESULT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$RESULT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">null</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sleep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  RESULT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> async.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">MESSAGE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">echo</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$RESULT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.message</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"></span></code></pre></div><p>注意，我们通过检查 <code>$RESULT</code> 变量及其是否为 <code>null</code> 来等待异步请求的结果。如果它是空的或是 <code>null</code>，我们就等待一秒钟并再次获取它的值。直到 Node.js 脚本输出 JSON 数据为止。</p><p>现在，我们可以使用 <code>jq</code> 工具提取消息字段，并将其设置为环境变量:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> MESSAGE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$MESSAGE</span></span>
<span class="line"></span></code></pre></div><p>最终，整个脚本应该长成这样：</p><p><strong>get_async_message.sh</strong></p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">RESULT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> async.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-z</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$RESULT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#A6ACCD;">$RESULT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">null</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">sleep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  RESULT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> async.js</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">MESSAGE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">echo</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$RESULT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.message</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> MESSAGE</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$MESSAGE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Async message is: </span><span style="color:#A6ACCD;">$MESSAGE</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>当您运行此脚本时，它应该会等待 5 秒钟(由 <code>async.js</code> 的 <code>setTimeout</code> 函数控制) 并输出以下内容：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Async message is: Hello, World!</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="我如何在-js-中获取从-sh-脚本中设置的环境变量" tabindex="-1">我如何在 js 中获取从 sh 脚本中设置的环境变量 <a class="header-anchor" href="#我如何在-js-中获取从-sh-脚本中设置的环境变量" aria-label="Permalink to &quot;我如何在 js 中获取从 sh 脚本中设置的环境变量&quot;">​</a></h4><p>在 JavaScript 中，您可以使用 <code>p<wbr>rocess.env</code> 对象来访问从 shell 脚本中设置的环境变量。</p><p>例如，在 Shell 脚本中，您可以这样设置环境变量：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> MY_VAR</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>要在 JavaScript 中访问此环境变量，请使用以下代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myVar </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MY_VAR</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myVar)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 输出 &quot;Hello World&quot;</span></span>
<span class="line"></span></code></pre></div><p>请注意，您需要使用与 shell 脚本中设置变量名称相同的 <code>key</code> 来访问环境变量。在上面的示例中，我们使用 <code>MY_VAR</code> 作为变量的名称。然后，在 JavaScript 中，我们使用 <code>p<wbr>rocess.env.MY_VAR</code> 来检索变量的值。</p>`,68),e=[p];function c(t,r,D,y,i,F){return n(),a("div",null,e)}const d=s(o,[["render",c]]);export{A as __pageData,d as default};
